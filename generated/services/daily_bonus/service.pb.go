// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package dailybonus

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserRequest struct {
	// The user ID of the user
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "dailybonus.UserRequest")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0x49, 0xcc, 0xcc, 0xa9,
	0x4c, 0xca, 0xcf, 0x2b, 0x2d, 0x96, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0xc8, 0x28,
	0xa9, 0x72, 0x71, 0x87, 0x16, 0xa7, 0x16, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89,
	0x71, 0xb1, 0x95, 0x16, 0xa7, 0x16, 0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41,
	0x79, 0x46, 0xd3, 0x18, 0xb9, 0xb8, 0x5c, 0x40, 0x66, 0x38, 0x81, 0xcc, 0x10, 0x72, 0xe2, 0xe2,
	0x74, 0x4f, 0x2d, 0x09, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x16, 0x12, 0xd7, 0x43, 0x98, 0xae, 0x87,
	0x64, 0x98, 0x94, 0x14, 0xb2, 0x04, 0x44, 0x71, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa,
	0x12, 0x83, 0x90, 0x0b, 0x17, 0xb7, 0x67, 0x5e, 0x66, 0x89, 0x5f, 0x6a, 0x39, 0x48, 0x0f, 0x99,
	0xa6, 0x24, 0xb1, 0x81, 0xbd, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x93, 0x6c, 0xd0, 0x53,
	0xf1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DailyBonusClient is the client API for DailyBonus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DailyBonusClient interface {
	// Gets the daily bonus status for a given user ID
	GetStatus(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Initialize daily bonus for a new user
	InitNewUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type dailyBonusClient struct {
	cc *grpc.ClientConn
}

func NewDailyBonusClient(cc *grpc.ClientConn) DailyBonusClient {
	return &dailyBonusClient{cc}
}

func (c *dailyBonusClient) GetStatus(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/dailybonus.DailyBonus/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyBonusClient) InitNewUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/dailybonus.DailyBonus/InitNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DailyBonusServer is the server API for DailyBonus service.
type DailyBonusServer interface {
	// Gets the daily bonus status for a given user ID
	GetStatus(context.Context, *UserRequest) (*StatusResponse, error)
	// Initialize daily bonus for a new user
	InitNewUser(context.Context, *UserRequest) (*StatusResponse, error)
}

// UnimplementedDailyBonusServer can be embedded to have forward compatible implementations.
type UnimplementedDailyBonusServer struct {
}

func (*UnimplementedDailyBonusServer) GetStatus(ctx context.Context, req *UserRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedDailyBonusServer) InitNewUser(ctx context.Context, req *UserRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitNewUser not implemented")
}

func RegisterDailyBonusServer(s *grpc.Server, srv DailyBonusServer) {
	s.RegisterService(&_DailyBonus_serviceDesc, srv)
}

func _DailyBonus_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyBonusServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dailybonus.DailyBonus/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyBonusServer).GetStatus(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyBonus_InitNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyBonusServer).InitNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dailybonus.DailyBonus/InitNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyBonusServer).InitNewUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DailyBonus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dailybonus.DailyBonus",
	HandlerType: (*DailyBonusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _DailyBonus_GetStatus_Handler,
		},
		{
			MethodName: "InitNewUser",
			Handler:    _DailyBonus_InitNewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
